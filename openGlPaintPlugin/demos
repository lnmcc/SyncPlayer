#if 0
	memDDS2Tex(dds, &m_textures[1]);

	glBindTexture(GL_TEXTURE_2D, m_textures[0]);

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	glBegin(GL_QUADS);
	glTexCoord2f(0.0f, 0.0f);
	glVertex3f(-1.0f, -1.0f, 0.0f);
	glTexCoord2f(1.0f, 0.0f);
	glVertex3f(1.0f, -1.0f, 0.0f);
	glTexCoord2f(1.0f, 1.0f);
	glVertex3f(1.0f, 1.0f, 0.0f);
	glTexCoord2f(0.0f, 1.0f);
	glVertex3f(-1.0f, 1.0f, 0.0f);
	glEnd();

	glXSwapBuffers(m_dpy, *m_win);

	glBindTexture(GL_TEXTURE_2D, 0);
#endif




void openGlPaintPlugin::render() {

	common::PicInfo *tmpPtr = NULL;

	glXMakeContextCurrent(m_dpy, *m_win, *m_win, *m_glc);
	glXSwapBuffers(m_dpy, *m_win);

	initGLX();
	initGL();

	while (true) {

		//if (m_dataQueuePos1.empty())
		//	continue;

		tmpPtr = m_dataQueuePos1.pop();
		paintDDS(tmpPtr);
		tmpPtr = m_dataQueuePos2.pop();
		paintDDS(tmpPtr);

		int left = tmpPtr->left; //x0
		int button = tmpPtr->button; //y0
		int right = tmpPtr->right; //x1
		int top = tmpPtr->top; //y1

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[0]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		glActiveTextureARB(GL_TEXTURE1_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[1]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		//把2个纹理相加
		glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_ADD);

		glBegin(GL_QUADS);
		//左下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 0);

		glVertex3f(left, button, 0.0f);
		//右下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 0);
		glVertex3f(right, button, 0.0f);
		//右上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 1);
		glVertex3f(right, top, 0.0f);
		//左上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 1);
		glVertex3f(left, top, 0.0f);

		glEnd();
		glFlush();
		glXSwapBuffers(m_dpy, *m_win);

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glDisable(GL_TEXTURE_2D);
		glActiveTextureARB(GL_TEXTURE1_ARB);
		glDisable(GL_TEXTURE_2D);

		//usleep(40 * 1000);
	}
}





void openGlPaintPlugin::render() {

	common::PicInfo *tmpPtr = NULL;

	glXMakeContextCurrent(m_dpy, *m_win, *m_win, *m_glc);
	glXSwapBuffers(m_dpy, *m_win);

	initGLX();
	initGL();

	while (true) {
		long long beg = common::Nowus();
		std::cerr << "beg : " << beg << " us" << std::endl;

		if (m_dataQueue.empty())
			continue;

		tmpPtr = m_dataQueue.pop();
		paintDDS(tmpPtr->data);

		int left = tmpPtr->left; //x0
		int button = tmpPtr->button; //y0
		int right = tmpPtr->right; //x1
		int top = tmpPtr->top; //y1

		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[0]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		glBegin(GL_QUADS);
		glTexCoord2f(0.0f, 0.0f);
		glVertex3f(left, button, 0.0f);

		glTexCoord2f(1.0f, 0.0f);
		glVertex3f(right, button, 0.0f);

		glTexCoord2f(1.0f, 1.0f);
		glVertex3f(right, top, 0.0f);

		glTexCoord2f(0.0f, 1.0f);
		glVertex3f(left, top, 0.0f);

		glEnd();
		glFlush();
		glXSwapBuffers(m_dpy, *m_win);

		long long end = common::Nowus();
		std::cerr << "end : " << end << " us" << std::endl;
		std::cerr << "render used : " << end - beg << " us" << std::endl;

		//usleep(40 * 1000);
	}
}






void openGlPaintPlugin::render() {

	DDS_IMAGE_DATA *tmpPtr = NULL;

	glXMakeContextCurrent(m_dpy, *m_win, *m_win, *m_glc);
	glXSwapBuffers(m_dpy, *m_win);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	initGLX();
	initGL();

	while (true) {
		long long beg = common::Nowus();
		std::cerr << "beg : " << beg << " us" << std::endl;

		if (m_dataQueue.empty())
			continue;

		tmpPtr = m_dataQueue.pop();

		paintDDS(tmpPtr);

		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[0]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		glBegin(GL_QUADS);
		glTexCoord2f(0.0f, 0.0f);
		glVertex3f(-1.0f, -1.0f, 0.0f);
		glTexCoord2f(1.0f, 0.0f);
		glVertex3f(1.0f, -1.0f, 0.0f);
		glTexCoord2f(1.0f, 1.0f);
		glVertex3f(1.0f, 1.0f, 0.0f);
		glTexCoord2f(0.0f, 1.0f);
		glVertex3f(-1.0f, 1.0f, 0.0f);
		glEnd();
		glFlush();
		glXSwapBuffers(m_dpy, *m_win);

		long long end = common::Nowus();
		std::cerr << "end : " << end << " us" << std::endl;
		std::cerr << "render used : " << end - beg << " us" << std::endl;

		//usleep(40 * 1000);
	}
}

void openGlPaintPlugin::render() {

	common::PicInfo *tmpPtr1 = NULL;
	common::PicInfo *tmpPtr2 = NULL;

	glXMakeContextCurrent(m_dpy, *m_win, *m_win, *m_glc);
	glXSwapBuffers(m_dpy, *m_win);

	initGLX();
	initGL();

	while (true) {

		if (m_dataQueuePos1.empty() || m_dataQueuePos2.empty())
			continue;

		tmpPtr1 = m_dataQueuePos1.front();
		m_dataQueuePos1.pop();
		paintDDS(tmpPtr1);
		int left = tmpPtr1->left; //x0
		int button = tmpPtr1->button; //y0
		int right = tmpPtr1->right; //x1
		int top = tmpPtr1->top; //y1

		tmpPtr2 = m_dataQueuePos2.front();
		m_dataQueuePos2.pop();
		paintDDS(tmpPtr2);

		int left2 = tmpPtr2->left; //x0
		int button2 = tmpPtr2->button; //y0
		int right2 = tmpPtr2->right; //x1
		int top2 = tmpPtr2->top; //y1

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[0]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		glActiveTextureARB(GL_TEXTURE1_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[1]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		//glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_ARB);
		//把2个纹理相加
		glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_ADD);

		glBegin(GL_QUADS);
		//左下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 0);
		glVertex3f(left, button, 0.0f);
		//右下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 0);
		glVertex3f(right, button, 0.0f);
		//右上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 1);
		glVertex3f(right, top, 0.0f);
		//左上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 1);
		glVertex3f(left, top, 0.0f);

		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 0);
		glVertex3f(left2, button2, 0.0f);
		//右下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 0);
		glVertex3f(right2, button2, 0.0f);
		//右上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 1);
		glVertex3f(right2, top2, 0.0f);
		//左上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 1);
		glVertex3f(left2, top2, 0.0f);

		glEnd();
		glFlush();
		glXSwapBuffers(m_dpy, *m_win);

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glDisable(GL_TEXTURE_2D);
		glActiveTextureARB(GL_TEXTURE1_ARB);
		glDisable(GL_TEXTURE_2D);

		usleep(40 * 1000);
	}
}

//支持混合
void openGlPaintPlugin::render() {

	common::PicInfo *tmpPtr1 = NULL;
	common::PicInfo *tmpPtr2 = NULL;

	glXMakeContextCurrent(m_dpy, *m_win, *m_win, *m_glc);
	glXSwapBuffers(m_dpy, *m_win);

	initGLX();
	initGL();

	while (true) {

		tmpPtr1 = m_dataQueuePos1.pop();
		paintDDS(tmpPtr1);
		int left = tmpPtr1->left; //x0
		int button = tmpPtr1->button; //y0
		int right = tmpPtr1->right; //x1
		int top = tmpPtr1->top; //y1

		tmpPtr2 = m_dataQueuePos2.pop();
		paintDDS(tmpPtr2);

		int left2 = tmpPtr2->left; //x0
		int button2 = tmpPtr2->button; //y0
		int right2 = tmpPtr2->right; //x1
		int top2 = tmpPtr2->top; //y1

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[0]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		glActiveTextureARB(GL_TEXTURE1_ARB);
		glEnable(GL_TEXTURE_2D);
		glBindTexture(GL_TEXTURE_2D, m_textures[1]);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

		//glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_COMBINE_ARB);
		//把2个纹理相加
		glTexEnvi(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_ADD);

		glBegin(GL_QUADS);
		//左下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 0);
		glVertex3f(left, button, 0.0f);
		//右下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 0);
		glVertex3f(right, button, 0.0f);
		//右上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 1);
		glVertex3f(right, top, 0.0f);
		//左上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 1);
		glVertex3f(left, top, 0.0f);

		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 0);
		glVertex3f(left2, button2, 0.0f);
		//右下
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 0);
		glVertex3f(right2, button2, 0.0f);
		//右上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 1, 1);
		glVertex3f(right2, top2, 0.0f);
		//左上
		glMultiTexCoord2fARB(GL_TEXTURE0_ARB, 0, 1);
		glVertex3f(left2, top2, 0.0f);

		glEnd();
		glFlush();
		glXSwapBuffers(m_dpy, *m_win);

		glActiveTextureARB(GL_TEXTURE0_ARB);
		glDisable(GL_TEXTURE_2D);
		glActiveTextureARB(GL_TEXTURE1_ARB);
		glDisable(GL_TEXTURE_2D);

		usleep(40 * 1000);
	}
}


	int screenWidth = m_context->getScreenWidth();
	int screenHeight = m_context->getScreenWidth();

	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	//gluPerspective(45.0,
	//		m_context->getScreenWidth() / m_context->getScreenHeight(), 0.0f,
	//		1000.0f);
	gluOrtho2D(-screenWidth / 2, screenWidth / 2, -screenHeight / 2, screenHeight / 2);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glViewport(0, 0, screenWidth, screenHeight);

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glClearColor(1.0f, 0.0f, 0.0f, 1.0f);
